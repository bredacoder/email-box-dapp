// Code generated by the multiversx-sc proxy generator. DO NOT EDIT.

////////////////////////////////////////////////////
////////////////// AUTO-GENERATED //////////////////
////////////////////////////////////////////////////

#![allow(dead_code)]
#![allow(clippy::all)]

use multiversx_sc::proxy_imports::*;

pub struct EmailBoxProxy;

impl<Env, From, To, Gas> TxProxyTrait<Env, From, To, Gas> for EmailBoxProxy
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    type TxProxyMethods = EmailBoxProxyMethods<Env, From, To, Gas>;

    fn proxy_methods(self, tx: Tx<Env, From, To, (), Gas, (), ()>) -> Self::TxProxyMethods {
        EmailBoxProxyMethods { wrapped_tx: tx }
    }
}

pub struct EmailBoxProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    wrapped_tx: Tx<Env, From, To, (), Gas, (), ()>,
}

#[rustfmt::skip]
impl<Env, From, Gas> EmailBoxProxyMethods<Env, From, (), Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    Gas: TxGas<Env>,
{
    pub fn init(
        self,
    ) -> TxTypedDeploy<Env, From, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_deploy()
            .original_result()
    }
}

#[rustfmt::skip]
impl<Env, From, To, Gas> EmailBoxProxyMethods<Env, From, To, Gas>
where
    Env: TxEnv,
    Env::Api: VMApi,
    From: TxFrom<Env>,
    To: TxTo<Env>,
    Gas: TxGas<Env>,
{
    pub fn send_email<
        Arg0: ProxyArg<ManagedAddress<Env::Api>>,
        Arg1: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg2: ProxyArg<ManagedBuffer<Env::Api>>,
        Arg3: ProxyArg<ManagedBuffer<Env::Api>>,
    >(
        self,
        to: Arg0,
        subject: Arg1,
        full_content: Arg2,
        ipfs_hash: Arg3,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("sendEmail")
            .argument(&to)
            .argument(&subject)
            .argument(&full_content)
            .argument(&ipfs_hash)
            .original_result()
    }

    pub fn set_max_preview_size<
        Arg0: ProxyArg<u32>,
    >(
        self,
        size: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setMaxPreviewSize")
            .argument(&size)
            .original_result()
    }

    pub fn set_max_content_size<
        Arg0: ProxyArg<u32>,
    >(
        self,
        size: Arg0,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ()> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("setMaxContentSize")
            .argument(&size)
            .original_result()
    }

    pub fn get_max_preview_size(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u32> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getMaxPreviewSize")
            .original_result()
    }

    pub fn get_max_content_size(
        self,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, u32> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getMaxContentSize")
            .original_result()
    }

    pub fn get_inbox<
        Arg0: ProxyArg<u32>,
        Arg1: ProxyArg<u32>,
    >(
        self,
        limit: Arg0,
        offset: Arg1,
    ) -> TxTypedCall<Env, From, To, NotPayable, Gas, ManagedBuffer<Env::Api>> {
        self.wrapped_tx
            .payment(NotPayable)
            .raw_call("getInbox")
            .argument(&limit)
            .argument(&offset)
            .original_result()
    }
}

#[type_abi]
#[derive(TopEncode, TopDecode, NestedEncode, NestedDecode, Clone)]
pub struct EmailSummary<Api>
where
    Api: ManagedTypeApi,
{
    pub from: ManagedAddress<Api>,
    pub to: ManagedAddress<Api>,
    pub subject: ManagedBuffer<Api>,
    pub preview: ManagedBuffer<Api>,
    pub timestamp: u64,
    pub ipfs_hash: ManagedBuffer<Api>,
}
